{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE Rank2Types #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE NoImplicitPrelude #-}

-- | HTML & CSS
module Neuron.Web.View where

import Clay (Css, em, gray, important, pct, (?))
import qualified Clay as C
import Control.Monad.Fix (MonadFix)
import Neuron.Config.Type (Config (..))
import Neuron.Web.Cache.Type (NeuronCache (NeuronCache))
import qualified Neuron.Web.Cache.Type as NeuronCache
import Neuron.Web.Common (neuronCommonStyle, neuronFonts)
import qualified Neuron.Web.Impulse as Impulse
import qualified Neuron.Web.Query.View as QueryView
import Neuron.Web.Route
  ( NeuronWebT,
    Route (..),
    routeTitle',
  )
import qualified Neuron.Web.Theme as Theme
import Neuron.Web.Widget (LoadableData, elLinkGoogleFonts, loadingWidget)
import qualified Neuron.Web.Zettel.CSS as ZettelCSS
import qualified Neuron.Web.Zettel.View as ZettelView
import Neuron.Zettelkasten.Zettel (ZettelC)
import Reflex.Dom.Core
import Reflex.Dom.Pandoc (PandocBuilder)
import Relude

headTemplate ::
  (DomBuilder t m, PostBuild t m) =>
  Dynamic t (LoadableData Config) ->
  Route a ->
  a ->
  m ()
headTemplate configDyn r v = do
  elAttr "meta" ("http-equiv" =: "Content-Type" <> "content" =: "text/html; charset=utf-8") blank
  elAttr "meta" ("name" =: "viewport" <> "content" =: "width=device-width, initial-scale=1") blank
  el "title" $ dynText $ maybe "Loading..." (either (const "Untitled") (routeTitle r v)) <$> configDyn
  elAttr "link" ("rel" =: "stylesheet" <> "href" =: "https://cdn.jsdelivr.net/npm/fomantic-ui@2.8.7/dist/semantic.min.css") blank
  elAttr "style" ("type" =: "text/css") $ text $ toText $ C.renderWith C.compact [] style
  elLinkGoogleFonts neuronFonts

routeTitle :: Route a -> a -> Config -> Text
routeTitle r v Config {..} =
  withSuffix siteTitle . routeTitle' v $ r
  where
    withSuffix suffix x =
      if x == suffix
        then x
        else x <> " - " <> suffix

bodyTemplate ::
  forall t m.
  DomBuilder t m =>
  Text ->
  Config ->
  m () ->
  m ()
bodyTemplate neuronVersion Config {..} w = do
  let neuronTheme = Theme.mkTheme theme
      themeSelector = toText $ Theme.themeIdentifier neuronTheme
  elAttr "div" ("class" =: "ui fluid container universe" <> "id" =: themeSelector) $ do
    w
    renderBrandFooter neuronVersion

renderRouteImpulse ::
  forall t m js.
  (DomBuilder t m, PostBuild t m, MonadHold t m, MonadFix m, Prerender js t m) =>
  Dynamic t (LoadableData NeuronCache) ->
  NeuronWebT t m ()
renderRouteImpulse cacheDyn = do
  loadingWidget cacheDyn $ \NeuronCache {..} -> do
    let cfg@Config {..} = _neuronCache_config
        neuronTheme = Theme.mkTheme theme
    -- HTML for this route is all handled in JavaScript (compiled from
    -- impulse's sources).
    bodyTemplate _neuronCache_neuronVersion cfg $ do
      divClass "ui text container" $ do
        let impulse = Impulse.buildImpulse _neuronCache_graph _neuronCache_errors
        Impulse.renderImpulse neuronTheme impulse

renderRouteZettel ::
  forall t m js.
  (PandocBuilder t m, PostBuild t m, MonadHold t m, MonadFix m, Prerender js t m) =>
  ZettelC ->
  Dynamic t (LoadableData NeuronCache) ->
  NeuronWebT t m ()
renderRouteZettel z cacheDyn = do
  loadingWidget cacheDyn $ \NeuronCache {..} -> do
    let cfg@Config {..} = _neuronCache_config
        neuronTheme = Theme.mkTheme theme
    bodyTemplate _neuronCache_neuronVersion cfg $ do
      ZettelView.renderZettel neuronTheme (_neuronCache_graph, z) editUrl

renderBrandFooter :: DomBuilder t m => Text -> m ()
renderBrandFooter ver =
  divClass "ui center aligned container footer-version" $ do
    divClass "ui tiny image" $ do
      elAttr "a" ("href" =: "https://neuron.zettel.page") $ do
        elAttr
          "img"
          ( "src" =: "https://raw.githubusercontent.com/srid/neuron/master/assets/neuron.svg"
              <> "alt" =: "logo"
              <> "title" =: ("Generated by Neuron (" <> ver <> ")")
          )
          blank

style :: Css
style = do
  "body" ? do
    neuronCommonStyle
    Impulse.style
    ZettelCSS.zettelCss
    QueryView.style
    footerStyle
  where
    footerStyle = do
      ".footer-version img" ? do
        C.filter $ C.grayscale $ pct 100
      ".footer-version img:hover" ? do
        C.filter $ C.grayscale $ pct 0
      ".footer-version, .footer-version a, .footer-version a:visited" ? do
        C.color gray
      ".footer-version a" ? do
        C.fontWeight C.bold
      ".footer-version" ? do
        important $ C.marginTop $ em 1
        C.fontSize $ em 0.7
